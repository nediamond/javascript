{"version":3,"sources":["core/pubnub-common.js"],"names":["setup","db","networking","config","_config","Config","crypto","Crypto","init","modules","timeEndpoint","endpointCreator","bind","timeEndpointConfig","leaveEndpoint","presenceLeaveEndpointConfig","heartbeatEndpoint","presenceHeartbeatEndpointConfig","setStateEndpoint","presenceSetStateConfig","subscribeEndpoint","subscribeEndpointConfig","listenerManager","_listenerManager","ListenerManager","subscriptionManager","SubscriptionManager","addListener","removeListener","removeAllListeners","channelGroups","listGroups","listChannelGroupsConfig","listChannels","listChannelsInChannelGroupConfig","addChannels","addChannelsChannelGroupConfig","removeChannels","removeChannelsChannelGroupConfig","deleteGroup","deleteChannelGroupConfig","push","addPushChannelsConfig","removePushChannelsConfig","deleteDevice","removeDevicePushConfig","listPushChannelsConfig","hereNow","presenceHereNowConfig","whereNow","presenceWhereNowEndpointConfig","getState","presenceGetStateConfig","setState","adaptStateChange","grant","grantEndpointConfig","audit","auditEndpointConfig","publish","publishEndpointConfig","fire","args","callback","replicate","storeInHistory","history","historyEndpointConfig","deleteMessages","deleteMessagesEndpointConfig","messageCounts","messageCountsEndpointConfig","fetchMessages","fetchMessagesEndpointConfig","time","subscribe","adaptSubscribeChange","presence","adaptPresenceChange","unsubscribe","adaptUnsubscribeChange","disconnect","reconnect","destroy","isOffline","unsubscribeAll","stop","getSubscribedChannels","getSubscribedChannelGroups","encrypt","decrypt","getAuthKey","setAuthKey","setCipherKey","getUUID","setUUID","getFilterExpression","setFilterExpression","setHeartbeatInterval","hasModule","setProxy","proxy","getVersion","announceNetworkDown","restore","announceNetworkUp","uuidGenerator","createUUID","OPERATIONS","CATEGORIES"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport Config from './components/config';\nimport Crypto from './components/cryptography/index';\nimport SubscriptionManager from './components/subscription_manager';\nimport ListenerManager from './components/listener_manager';\n\nimport endpointCreator from './components/endpoint';\n\nimport * as addChannelsChannelGroupConfig from './endpoints/channel_groups/add_channels';\nimport * as removeChannelsChannelGroupConfig from './endpoints/channel_groups/remove_channels';\nimport * as deleteChannelGroupConfig from './endpoints/channel_groups/delete_group';\nimport * as listChannelGroupsConfig from './endpoints/channel_groups/list_groups';\nimport * as listChannelsInChannelGroupConfig from './endpoints/channel_groups/list_channels';\n\nimport * as addPushChannelsConfig from './endpoints/push/add_push_channels';\nimport * as removePushChannelsConfig from './endpoints/push/remove_push_channels';\nimport * as listPushChannelsConfig from './endpoints/push/list_push_channels';\nimport * as removeDevicePushConfig from './endpoints/push/remove_device';\n\nimport * as presenceLeaveEndpointConfig from './endpoints/presence/leave';\nimport * as presenceWhereNowEndpointConfig from './endpoints/presence/where_now';\nimport * as presenceHeartbeatEndpointConfig from './endpoints/presence/heartbeat';\nimport * as presenceGetStateConfig from './endpoints/presence/get_state';\nimport * as presenceSetStateConfig from './endpoints/presence/set_state';\nimport * as presenceHereNowConfig from './endpoints/presence/here_now';\n\nimport * as auditEndpointConfig from './endpoints/access_manager/audit';\nimport * as grantEndpointConfig from './endpoints/access_manager/grant';\n\nimport * as publishEndpointConfig from './endpoints/publish';\nimport * as historyEndpointConfig from './endpoints/history/get_history';\nimport * as deleteMessagesEndpointConfig from './endpoints/history/delete_messages';\nimport * as messageCountsEndpointConfig from './endpoints/history/message_counts';\nimport * as fetchMessagesEndpointConfig from './endpoints/fetch_messages';\nimport * as timeEndpointConfig from './endpoints/time';\nimport * as subscribeEndpointConfig from './endpoints/subscribe';\n\nimport OPERATIONS from './constants/operations';\nimport CATEGORIES from './constants/categories';\n\nimport { InternalSetupStruct } from './flow_interfaces';\nimport uuidGenerator from './components/uuid';\n\nexport default class {\n  _config: Config;\n  _listenerManager: ListenerManager;\n\n  // tell flow about the mounted endpoint\n  time: Function;\n  publish: Function;\n  fire: Function;\n\n  history: Function;\n  deleteMessages: Function;\n  messageCounts: Function;\n  fetchMessages: Function;\n\n  //\n  channelGroups: Object;\n  //\n  push: Object;\n  //\n  hereNow: Function;\n  whereNow: Function;\n  getState: Function;\n  setState: Function;\n  //\n  grant: Function;\n  audit: Function;\n  //\n  subscribe: Function;\n  presence: Function;\n  unsubscribe: Function;\n  unsubscribeAll: Function;\n\n  disconnect: Function;\n  reconnect: Function;\n\n  destroy: Function;\n  stop: Function;\n\n  getSubscribedChannels: Function;\n  getSubscribedChannelGroups: Function;\n\n  addListener: Function;\n  removeListener: Function;\n  removeAllListeners: Function;\n\n  getAuthKey: Function;\n  setAuthKey: Function;\n\n  setCipherKey: Function;\n  setUUID: Function;\n  getUUID: Function;\n\n  getFilterExpression: Function;\n  setFilterExpression: Function;\n\n  setHeartbeatInterval: Function;\n\n  setProxy: Function;\n\n  encrypt: Function;\n  decrypt: Function;\n\n  //\n\n  constructor(setup: InternalSetupStruct) {\n    let { db, networking } = setup;\n\n    const config = (this._config = new Config({ setup, db }));\n    const crypto = new Crypto({ config });\n\n    networking.init(config);\n\n    let modules = { config, networking, crypto };\n\n    const timeEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      timeEndpointConfig\n    );\n    const leaveEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      presenceLeaveEndpointConfig\n    );\n    const heartbeatEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      presenceHeartbeatEndpointConfig\n    );\n    const setStateEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      presenceSetStateConfig\n    );\n    const subscribeEndpoint = endpointCreator.bind(\n      this,\n      modules,\n      subscribeEndpointConfig\n    );\n\n    // managers\n    const listenerManager = (this._listenerManager = new ListenerManager());\n\n    const subscriptionManager = new SubscriptionManager({\n      timeEndpoint,\n      leaveEndpoint,\n      heartbeatEndpoint,\n      setStateEndpoint,\n      subscribeEndpoint,\n      crypto: modules.crypto,\n      config: modules.config,\n      listenerManager,\n    });\n\n    this.addListener = listenerManager.addListener.bind(listenerManager);\n    this.removeListener = listenerManager.removeListener.bind(listenerManager);\n    this.removeAllListeners = listenerManager.removeAllListeners.bind(\n      listenerManager\n    );\n\n    /* channel groups */\n    this.channelGroups = {\n      listGroups: endpointCreator.bind(this, modules, listChannelGroupsConfig),\n      listChannels: endpointCreator.bind(\n        this,\n        modules,\n        listChannelsInChannelGroupConfig\n      ),\n      addChannels: endpointCreator.bind(\n        this,\n        modules,\n        addChannelsChannelGroupConfig\n      ),\n      removeChannels: endpointCreator.bind(\n        this,\n        modules,\n        removeChannelsChannelGroupConfig\n      ),\n      deleteGroup: endpointCreator.bind(\n        this,\n        modules,\n        deleteChannelGroupConfig\n      ),\n    };\n    /* push */\n    this.push = {\n      addChannels: endpointCreator.bind(this, modules, addPushChannelsConfig),\n      removeChannels: endpointCreator.bind(\n        this,\n        modules,\n        removePushChannelsConfig\n      ),\n      deleteDevice: endpointCreator.bind(this, modules, removeDevicePushConfig),\n      listChannels: endpointCreator.bind(this, modules, listPushChannelsConfig),\n    };\n    /* presence */\n    this.hereNow = endpointCreator.bind(this, modules, presenceHereNowConfig);\n    this.whereNow = endpointCreator.bind(\n      this,\n      modules,\n      presenceWhereNowEndpointConfig\n    );\n    this.getState = endpointCreator.bind(this, modules, presenceGetStateConfig);\n    this.setState = subscriptionManager.adaptStateChange.bind(\n      subscriptionManager\n    );\n    /* PAM */\n    this.grant = endpointCreator.bind(this, modules, grantEndpointConfig);\n    this.audit = endpointCreator.bind(this, modules, auditEndpointConfig);\n    //\n    this.publish = endpointCreator.bind(this, modules, publishEndpointConfig);\n\n    this.fire = (args, callback) => {\n      args.replicate = false;\n      args.storeInHistory = false;\n      return this.publish(args, callback);\n    };\n\n    this.history = endpointCreator.bind(this, modules, historyEndpointConfig);\n    this.deleteMessages = endpointCreator.bind(\n      this,\n      modules,\n      deleteMessagesEndpointConfig\n    );\n    this.messageCounts = endpointCreator.bind(\n      this,\n      modules,\n      messageCountsEndpointConfig\n    );\n    this.fetchMessages = endpointCreator.bind(\n      this,\n      modules,\n      fetchMessagesEndpointConfig\n    );\n\n    this.time = timeEndpoint;\n\n    // subscription related methods\n    this.subscribe = subscriptionManager.adaptSubscribeChange.bind(\n      subscriptionManager\n    );\n    this.presence = subscriptionManager.adaptPresenceChange.bind(\n      subscriptionManager\n    );\n    this.unsubscribe = subscriptionManager.adaptUnsubscribeChange.bind(\n      subscriptionManager\n    );\n    this.disconnect = subscriptionManager.disconnect.bind(subscriptionManager);\n    this.reconnect = subscriptionManager.reconnect.bind(subscriptionManager);\n\n    this.destroy = (isOffline: boolean) => {\n      subscriptionManager.unsubscribeAll(isOffline);\n      subscriptionManager.disconnect();\n    };\n\n    // --- deprecated  ------------------\n    this.stop = this.destroy; // --------\n    // --- deprecated  ------------------\n\n    this.unsubscribeAll = subscriptionManager.unsubscribeAll.bind(\n      subscriptionManager\n    );\n\n    this.getSubscribedChannels = subscriptionManager.getSubscribedChannels.bind(\n      subscriptionManager\n    );\n    this.getSubscribedChannelGroups = subscriptionManager.getSubscribedChannelGroups.bind(\n      subscriptionManager\n    );\n\n    // mount crypto\n    this.encrypt = crypto.encrypt.bind(crypto);\n    this.decrypt = crypto.decrypt.bind(crypto);\n\n    /* config */\n    this.getAuthKey = modules.config.getAuthKey.bind(modules.config);\n    this.setAuthKey = modules.config.setAuthKey.bind(modules.config);\n    this.setCipherKey = modules.config.setCipherKey.bind(modules.config);\n    this.getUUID = modules.config.getUUID.bind(modules.config);\n    this.setUUID = modules.config.setUUID.bind(modules.config);\n    this.getFilterExpression = modules.config.getFilterExpression.bind(\n      modules.config\n    );\n    this.setFilterExpression = modules.config.setFilterExpression.bind(\n      modules.config\n    );\n\n    this.setHeartbeatInterval = modules.config.setHeartbeatInterval.bind(\n      modules.config\n    );\n\n    if (networking.hasModule('proxy')) {\n      this.setProxy = proxy => {\n        modules.config.setProxy(proxy);\n        this.reconnect();\n      };\n    }\n  }\n\n  getVersion(): string {\n    return this._config.getVersion();\n  }\n\n  // network hooks to indicate network changes\n  networkDownDetected() {\n    this._listenerManager.announceNetworkDown();\n\n    if (this._config.restore) {\n      this.disconnect();\n    } else {\n      this.destroy(true);\n    }\n  }\n\n  networkUpDetected() {\n    this._listenerManager.announceNetworkUp();\n    this.reconnect();\n  }\n\n  static generateUUID(): string {\n    return uuidGenerator.createUUID();\n  }\n\n  static OPERATIONS = OPERATIONS;\n  static CATEGORIES = CATEGORIES;\n}\n"],"file":"pubnub-common.js"}